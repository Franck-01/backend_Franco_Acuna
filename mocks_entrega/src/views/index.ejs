<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Monks EJS</title>
</head>

<body>
    <div class="formulate">
        <div id="chatContainer">
            <input type="text" id="chatInput" placeholder="chat">
            <p id="ChatLog"></p>
        </div>
        <h1>Welcome to the ship factory</h1>
        <form id="formis">
            <label>Name:</label>
            <input type="text" name="name">
            <label>Model:</label>
            <input type="text" name="model">
            <label>Faction:</label>
            <input type="text" name="faction">
            <label>Imagen en URL:</label>
            <input name="img">
            <input type="submit" value="Enviar">
        </form>
    </div>
    <ul id="champsTemplate"></ul>
    <%- include("./history/index_history",{form:form}) %>
        <script src="//cdn.jsdelivr.net/npm/sweetalert2@11"></script>
        <script src="./socket.io/socket.io.js"></script>
        <script>
            const socket = io();
            let user;
            const form = document.getElementById('formis');
            const input = document.getElementById('chatInput');
            const chatLog = document.getElementById('chatLog');

            const userLoged = {
                author: {}
            }

            const userInfo = async() => {
                const {
                    value: formValues
                } = await new swal({
                    title: 'Bienvenido',
                    html: '<label>Cual es tu nombre?:</label>' +
                        '<input id="name" class="swal2-input">' +
                        '<label>Edad:</label>' +
                        '<input id="age" class="swal2-input">' +
                        '<label>Rango:</label>' +
                        '<input id="rank" class="swal2-input">' +
                        '<label>Tu facci√≥n:</label>' +
                        '<input id="faction" class="swal2-input">' +
                        '<label>nos faltaria un email:</label>' +
                        '<input id="id" class="swal2-input">',
                    focusConfirm: false,
                    allowOutsideClick: false,
                    preConfirm: () => {
                        userLoged.author.name = document.getElementById('name').value
                        userLoged.author.age = document.getElementById('age').value
                        userLoged.author.rank = document.getElementById('rank').value
                        userLoged.author.faction = document.getElementById('faction').value
                        userLoged.author.id = document.getElementById('id').value
                    }
                })
                if (formValues) {
                    console.log(formValues)
                }
            }

            userInfo()

            input.addEventListener('keyup', (e) => {
                if (e.key === "Enter") {
                    socket.emit('message', {
                        user: user,
                        message: input.value.trim(),
                    })
                    userLoged.text = input.value.trim()
                    socket.emit('userInfo', userLoged)
                    input.value = "";
                }
            })

            form.addEventListener('submit', (e) => {
                e.preventDefault();
                let formData = new FormData(form)
                let info = {};
                formData.forEach((val, key) => info[key] = val);
                socket.emit('sentPrinc', info);
                form.reset();
            })

            socket.on('ChatLog', data => {
                console.log(data)
                const chatLog = document.getElementById('ChatLog');
                let messages = "";
                data.forEach(message => {
                    messages += `
                    <div class="chatMessage">
                        <p class="email">${message.author.id}:</p>
                        <p class="time">${message.time}</p>
                        <p class="message">${message.text}</p>
                    </div>
                    `
                });
                chatLog.innerHTML = messages;
            })

            socket.on('princLog', (data) => {
                const champs = data.payload;
                const champsTemplate = document.getElementById('champsTemplate');
                fetch('history/index_history.ejs').then(res => {
                    return res.text();
                }).then(template => {
                    const processe = ejs.compile(template);
                    const html = processe({
                        champs
                    });
                    champsTemplate.innerHTML = html;
                })
            })
        </script>
        <style>
            html {
                background-repeat: no-repeat;
                background-image: url("https://img5.goodfon.com/wallpaper/nbig/1/77/star-wars-mandalorian-yoda-baby-yoda-2020.jpg");
                background-position: center top;
                background-size: cover;
                background-attachment: fixed;
                height: 100%;
            }
            
            .swal2 {
                color: white;
            }
            
            .swal2-html-container {
                display: flex !important;
                align-items: center !important;
                flex-direction: column !important;
            }
            
            .swal2-input {
                width: 80% !important;
                margin: .3em 0 1em !important;
            }
            
            .chatMessage {
                display: flex;
                flex-direction: row;
            }
            
            .email {
                font-weight: bold;
                color: rgb(37, 37, 134);
            }
            
            .time {
                color: rgb(151, 40, 40);
                order: 2;
                margin-left: auto;
            }
            
            .message {
                color: #008800;
                font-style: italic;
            }
            
            .formulate {
                color: white;
            }
            
            .formulate input {
                background: rgb(255, 255, 255);
                background: linear-gradient(0deg, rgba(255, 255, 255, 0) 0%, rgba(0, 0, 0, 0) 100%);
                color: white;
                padding: 1%;
                margin-left: 4%;
                margin-right: 4%;
            }
        </style>
</body>

</html>